{"version":3,"file":"Physics.js","sources":["collections/Collections.kt","../../../../../src/commonMain/kotlin/main.kt","../../../../../kds/src/commonMain/kotlin/com/soywiz/kds/_Delegates.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/RoundRect.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/MouseEvents.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Container.kt","../../../../../klock/src/commonMain/kotlin/com/soywiz/klock/TimeSpan.kt","generated/_Ranges.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Sprite.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Circle.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Text.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/ui/UIText.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/input/KeysEvents.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/Context2d.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/vector/renderer/Renderer.kt","../../../../../src/commonMain/kotlin/GamePlay.kt","../../../../../korge/src/commonMain/kotlin/com/soywiz/korge/view/Image.kt","collections/Maps.kt","util/Standard.kt","generated/_Collections.kt","../../../../../src/commonMain/kotlin/Shapes.kt","../../../../../korim/src/commonMain/kotlin/com/soywiz/korim/bitmap/Bitmap.kt","../../../../../src/commonMain/kotlin/Symbols.kt","../../../../../src/commonMain/kotlin/utils/Constructors.kt"],"sourcesContent":[null,null,null,null,null,null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.toInt(), last.toInt() + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n",null,null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:UseExperimental(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return LinkedHashMap<K, V>().apply(builderAction)\n}\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    checkBuilderCapacity(capacity)\n    return LinkedHashMap<K, V>(mapCapacity(capacity)).apply(builderAction)\n}\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Checks a collection builder function capacity argument.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@PublishedApi\ninternal expect fun checkBuilderCapacity(capacity: Int)\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element. Returns null if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value. Returns null if the list is empty.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scanReduce\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic inline fun <S, T : S> Iterable<T>.scanReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n",null,null,null,null],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;uBAoFA,+C;;;;;WCW0B,gB;;;;;;;;;;;;;;;;;;;;;;;;;cAylBZ,yB;;;;;;;;;;;aArJH,wB;;;;;;;;;;;;;;;;;YCrgBH,M;iBAAA,e;2BAUA,oD;uBCnBR,wD;+BCmWA,6B;kBATA,iE;4BAAA,kH;uBCvWA,wD;iBC8B4B,kD;iBCrB5B,2B;eAAA,mC;oBCTA,kE;oBCFA,qD;aCKA,mD;oBCGA,mD;iBC2BA,gE;;;;;;uBCqKC,qB;oBC9IG,8F;;;;kBDyNH,gH;;;;;;;;;;;;;EEvRc,6B;IAAC,yB;MAAA,YAAgB,C;IAC5B,aAAY,S;IACZ,sBAAqB,C;IACrB,efqFoD,gB;IenFpD,iBAAgB,kBAAS,c;G;;SAGrB,Y;MAAQ,QAAK,IAAK,MAAV,C;aACJ,C;UADI,OACC,E;aACL,C;UAFI,OAEC,E;gBAFD,OAGI,E;;K;;;;;;;ECHwF,iC;IAAC,W;G;EbkBzD,qC;IAAC,W;G;ECqV2C,sG;IAAA,wC;IAAA,yB;IAAA,8C;IAAA,oC;G;;;;mEAAA,Y;;;;;YAAE,gB;4BAAA,2BAAQ,qBAAR,O;gBAAA,qC;qBAAA,mB;;;;;YAAA,oB;;;;;;;;;;;;;;G;EAAF,4E;IAAA,4C;qBAAA,gG;UAAA,S;eAAA,Q;;eAAA,uB;K;G;EAA5C,oE;IAAA,qB;MAAE,oBAAkB,aAAM,iBAAxB,EAA0C,sDAA1C,C;MAA0D,W;K;G;ECxWjC,qC;IAAC,W;G;EGAkD,kC;IAAC,W;G;ECMlF,kC;IAAC,W;G;ECCN,gC;IAAC,W;G;ECGC,kC;IAAC,W;G;;;EVa/C,oB;WAAA,0C;G;EAAA,0B;IAAA,kD;G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAuDiE,qC;IAAE,0BAAe,eAAf,EAAsB,EAAtB,C;EAAmC,C;;;EAAtG,kC;IAAA,0B;;MCxD0C,gC;MAAX,wB;MAAW,kDAAiB,+B;MAA/C,UAAW,uH;MACX,IAAI,WAAJ,C;QACI,QAAQ,+B;QAUO,0C;QADnB,IAAY,eAAR,QAAJ,C;UAA2B,kBAAgB,oB;QACnC,wB;QAAW,sDAAiB,+B;QAAM,mBATV,CASU,6D;QAA1C,mB;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D,QAAQ,QAAhE,E;YAChB,gBAAgB,QAAO,QAAQ,SAAf,EAA0B,IAAE,SAAF,GAAY,CAAZ,GAAgB,KAA1C,EAAiD,YAAU,CAAV,GAAc,KAA/D,EAAsE,KAAtE,E;YIKQ,oBAAhB,MAjOR,oBAiOQ,uB;YAAgB,oBAAhB,MF9ML,mBF6MQ,QE7MR,EF6MkB,SE7MlB,EF6M6B,IE7M7B,EF6M6B,IE7M7B,EF6M2C,YAAO,SE7MlD,EAFuB,IAEvB,CE8MK,EazJL,abyJK,C;YF/M2C,gBesDhD,e;YjByJC,KiBxJM,ajBwJN,EAAG,sBAAU,CAAV,CAAH,EAAiB,sBAAU,CAAV,CAAjB,C;YIAoB,oBAAhB,MF9ML,mBF+MQ,WAAW,EE/MnB,EF+M+B,YAAY,EE/M3C,EF+MuD,IE/MvD,EF+MuD,IE/MvD,EF+MqE,YAAO,UE/M5E,EAFuB,IAEvB,CE8MK,EazJL,abyJK,C;YF/M2C,gBesDhD,e;YjB2JC,KiB1JM,ajB0JN,EAAG,sBAAU,CAAV,IAAe,CAAlB,EAA0B,sBAAU,CAAV,IAAe,CAAzC,C;YIFoB,oBAAhB,MF9ML,mBFmNQ,cEnNR,EFmNwB,SEnNxB,EFmNmC,IEnNnC,EFmNmC,IEnNnC,EFmNiD,YAAO,UEnNxD,EAFuB,IAEvB,CE8MK,EazJL,abyJK,C;YF/M2C,gBesDhD,e;YjB8JmE,KiB7J5D,ajB6J4D,EAAG,sBAAU,CAAV,IAAe,CAAlB,EAA0B,sBAAU,CAAV,CAA1B,C;YIL9C,oBAAhB,MF9ML,mBFsNQ,QEtNR,EFsNkB,cEtNlB,EFsNkC,IEtNlC,EFsNkC,IEtNlC,EFsNgD,YAAO,UEtNvD,EAFuB,IAEvB,CE8MK,EazJL,abyJK,C;YF/M2C,gBesDhD,e;YjBiKkE,KiBhK3D,ajBgK2D,EAAG,sBAAU,CAAV,CAAH,EAAiB,sBAAU,CAAV,IAAe,CAAhC,C;YAGpE,iBAAc,CAAd,WAAiB,CAAjB,U;cIXuB,qBAAhB,MF9ML,mBF0NS,cE1NT,EF0NyB,cE1NzB,EF0NyC,GE1NzC,EF0NyC,GE1NzC,EF0NsD,YAAO,SE1N7D,EAFuB,IAEvB,CE8MK,EazJL,abyJK,C;cF/M2C,gBesDhD,gB;c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G;;EAAA,kC;IAAA,a;MAAA,Y;QAAA,oC;MAAA,c;QAAA,sC;MAAA,Y;QAAA,oC;MAAA,QAAA,+C;;G;;EAMA,iD;IAEI,iBAAiB,QAAS,KAAK,K;IAC/B,kBAAkB,QAAS,MAAM,M;IAEO,gBAAjC,aAAS,UAAT,EAAqB,UAArB,C;ICrBH,gB;;MAiKA,UAAU,+BAFyC,IAEzC,C;;QAEG,GD7Ib,aAAY,I;QAGZ,QAAe,aAAf,M;eACI,S;YACI,a;YAAA,W;YAAA,Y;YP+QgB,YQvIX,GRuIoC,U;YAAW,UQvI/C,GRuIuE,Q;YAAS,WQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YQH5B,GDtID,gBAAO,GAAP,EAAY,GAAZ,C;YCsIC,GDrID,gBAAO,IAAP,EAAa,IAAb,C;YCqIC,GDpID,gBAAO,IAAP,EAAY,GAAZ,C;YCoIC,GDnID,gBAAO,IAAP,EAAa,IAAb,C;YCmIC,GDlID,gBAAO,GAAP,EAAW,GAAX,C;YCkIC,GDjID,gBAAO,IAAP,EAAa,IAAb,C;YCiIC,GDhID,gBAAO,IAAP,EAAa,IAAb,C;YCgIC,GD/HD,gBAAO,IAAP,EAAa,IAAb,C;YC+HC,GD9HD,Q;YC8HC,GRyIb,aAAiB,S;YQzIJ,GR0Ib,WAAe,O;YQ1IF,GR2Ib,YAAgB,Q;YQ3IH,GR4InB,gBAAO,2BAAP,C;YOrRU,K;eAeD,Y;YACK,e;YAAA,a;YAAA,c;YPgQgB,cQvIX,GRuIoC,U;YAAW,YQvI/C,GRuIuE,Q;YAAS,aQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YQH5B,GDvHD,gBAAO,GAAP,EAAY,GAAZ,C;YCuHC,GDtHD,gBAAO,IAAP,EAAa,IAAb,C;YCsHC,GDrHD,gBAAO,GAAP,EAAY,GAAZ,C;YCqHC,GDpHD,gBAAO,IAAP,EAAa,IAAb,C;YCoHC,GDnHD,gBAAO,GAAP,EAAY,GAAZ,C;YCmHC,GDlHD,gBAAO,IAAP,EAAa,IAAb,C;YCkHC,GDjHD,gBAAO,GAAP,EAAY,GAAZ,C;YCiHC,GDhHD,gBAAO,IAAP,EAAa,IAAb,C;YCgHC,GD/GD,Q;YC+GC,GRyIb,aAAiB,W;YQzIJ,GR0Ib,WAAe,S;YQ1IF,GR2Ib,YAAgB,U;YQ3IH,GR4InB,gBAAO,2BAAP,C;YOtQS,K;eAeC,U;YACI,e;YAAA,a;YAAA,c;YPiPgB,cQvIX,GRuIoC,U;YAAW,YQvI/C,GRuIuE,Q;YAAS,aQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YQH5B,GDxGD,gBAAO,IAAP,EAAa,IAAb,C;YCwGC,GDvGD,gBAAO,IAAP,EAAa,IAAb,C;YCuGC,GDtGD,gBAAO,IAAP,EAAa,IAAb,C;YCsGC,GDrGD,gBAAO,IAAP,EAAa,IAAb,C;YCqGC,GDpGD,gBAAO,GAAP,EAAY,GAAZ,C;YCoGC,GDnGD,Q;YCmGC,GRyIb,aAAiB,W;YQzIJ,GR0Ib,WAAe,S;YQ1IF,GR2Ib,YAAgB,U;YQ3IH,GR4InB,gBAAO,2BAAP,C;YOvPU,K;eAYA,Q;YACI,e;YAAA,a;YAAA,c;YPqOgB,cQvIX,GRuIoC,U;YAAW,YQvI/C,GRuIuE,Q;YAAS,aQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YQH5B,GD5FD,gBAAO,GAAP,EAAY,GAAZ,C;YC4FC,GD3FD,gBAAO,GAAP,EAAY,GAAZ,C;YC2FC,GD1FD,gBAAO,GAAP,EAAY,GAAZ,C;YC0FC,GDzFD,gBAAO,GAAP,EAAY,GAAZ,C;YCyFC,GDxFD,Q;YCwFC,GRyIb,aAAiB,W;YQzIJ,GR0Ib,WAAe,S;YQ1IF,GR2Ib,YAAgB,U;YQ3IH,GR4InB,gBAAO,2BAAP,C;YO3OU,K;eAWA,U;YACI,e;YAAA,a;YAAA,c;YP0NgB,cQvIX,GRuIoC,U;YAAW,YQvI/C,GRuIuE,Q;YAAS,aQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YQH5B,GDjFD,gBAAO,IAAP,EAAa,IAAb,C;YCiFC,GDhFD,gBAAO,IAAP,EAAa,IAAb,C;YCgFC,GD/ED,gBAAO,GAAP,EAAY,GAAZ,C;YC+EC,GD9ED,Q;YC8EC,GRyIb,aAAiB,W;YQzIJ,GR0Ib,WAAe,S;YQ1IF,GR2Ib,YAAgB,U;YQ3IH,GR4InB,gBAAO,2BAAP,C;YOhOU,K;kBAUQ,e;YAAA,a;YAAA,c;YPiNY,cQvIX,GRuIoC,U;YAAW,YQvI/C,GRuIuE,Q;YAAS,aQvIhF,GRuI0G,S;YQvI1G,GRG4B,eAAS,0BAAT,EAAwB,0BAAxB,C;YO3EjC,OCwEK,GDxEL,EAAO,GAAP,EAAW,GAAX,EAAgB,GAAhB,C;YCwEK,GRyIb,aAAiB,W;YQzIJ,GR0Ib,WAAe,S;YQ1IF,GR2Ib,YAAgB,U;YQ3IH,GR4InB,gBAAO,2BAAP,C;YOtRM,K;;QC0Ia,GDpEb,cAAK,2BAAL,C;QAGS,YCiEI,GDjEb,S;QAAS,QAAuB,CCiEnB,GDjEmB,SAAM,CAAN,SAAsB,iBAAZ,GAAkB,CAAlB,IAAV,K;QAAvB,QAAsD,CCiElD,GDjEkD,UAAO,CAAP,SAAuB,kBAAZ,GAAmB,CAAnB,IAAX,K;QAAtD,S;QAAA,U;QAAA,a;QNxEa,QAAsB,iB;QAAO,SAAuB,kB;QAC1E,YAAoB,iB;QACpB,qCAAmB,eAAF,CAAE,CAAnB,EAAiC,eAAF,CAAE,CAAjC,EAAmD,eAAN,KAAM,CAAnD,EAAsE,eAAP,MAAO,CAAtE,EAAkF,SAAlF,C;;QOyII,GAAI,U;;;MAjKJ,yBAL2B,IAK3B,C;;IDiBR,OCmJO,S;EDpEX,C;EEjIoB,2C;IAAmB,0B;MAAA,aAAsB,E;IAAxC,kB;IAAkB,4B;IAMC,gBAAlB,YAAY,CAAZ,EAAe,CAAf,C;IDuBd,gB;;MAiKA,UAAU,+BAFyC,IAEzC,C;;QAEG,GCzLb,aAAY,G;QDyLC,GCxLb,wB;QACA,cAAO,YAAO,M;QAAd,a;QAAA,W;QAAA,Y;QT8TwB,YQvIX,GRuIoC,U;QAAW,UQvI/C,GRuIuE,Q;QAAS,WQvIhF,GRuI0G,S;QS7TnH,SAAM,e;QDsLG,GRG4B,eAAS,eAAH,EAAG,CAAT,EAAwB,eAA9B,EAA8B,CAAxB,C;QQH5B,GCrLT,gBAAO,GAAP,EAAY,GAAZ,C;QDqLS,GCpLT,gBAAO,GAAP,EAAY,GAAZ,C;QDoLS,GCnLT,Q;QDmLS,GRyIb,aAAiB,S;QQzIJ,GR0Ib,WAAe,O;QQ1IF,GR2Ib,YAAgB,Q;QQ3IH,GR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,GAAI,U;;;MAjKJ,yBAL2B,IAK3B,C;;IC9BR,mBDkMO,S;ICpLmD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDYlB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KC9Kb,aAAY,I;QD8KC,KC7Kb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTmTwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSlTnH,WAAM,e;QD2KG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC1KT,gBAAO,GAAP,EAAY,GAAZ,C;QD0KS,KCzKT,gBAAO,GAAP,EAAY,GAAZ,C;QDyKS,KCxKT,gBAAO,GAAP,EAAY,GAAZ,C;QDwKS,KCvKT,gBAAO,GAAP,EAAY,GAAZ,C;QACA,ODsKS,KCtKT,EAAO,GAAP,EAAW,GAAX,EAAgB,IAAhB,C;QDsKS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IChBR,uBDoLO,W;ICvK6C,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDDZ,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCjKb,aAAY,I;QDiKC,KChKb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTsSwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSrSnH,WAAM,e;QD8JG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QShKrC,OD6JS,KC7JT,EAAO,GAAP,EAAW,GAAX,EAAgB,GAAhB,C;QACA,OD4JS,KC5JT,EAAO,GAAP,EAAW,GAAX,EAAgB,IAAhB,C;QD4JS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;ICHR,iBDuKO,W;IC7J+C,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDXd,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCvJb,aAAY,I;QDuJC,KCtJb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QT4RwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QS3RnH,WAAM,e;QDoJG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QStJrC,ODmJS,KCnJT,EAAO,GAAP,EAAW,GAAX,EAAgB,GAAhB,C;QDmJS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;ICOR,mBD6JO,W;ICpJ8C,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDpBb,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KC9Ib,aAAY,I;QD8IC,KC7Ib,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTmRwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSlRnH,WAAM,e;QD2IG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC1IT,gBAAO,GAAP,EAAY,GAAZ,C;QD0IS,KCzIT,gBAAO,IAAP,EAAa,GAAb,C;QDyIS,KCxIT,gBAAO,GAAP,EAAY,GAAZ,C;QDwIS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;ICgBR,kBDoJO,W;ICzIoD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID/BnB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCnIb,aAAY,I;QDmIC,KClIb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTwQwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSvQnH,WAAM,e;QDgIG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC/HT,gBAAO,GAAP,EAAY,GAAZ,C;QD+HS,KC9HT,gBAAO,IAAP,EAAa,GAAb,C;QD8HS,KC7HT,gBAAO,GAAP,EAAY,GAAZ,C;QD6HS,KC5HT,gBAAO,GAAP,EAAY,GAAZ,C;QD4HS,KC3HT,gBAAO,IAAP,EAAa,GAAb,C;QD2HS,KC1HT,gBAAO,GAAP,EAAY,GAAZ,C;QD0HS,KCzHT,gBAAO,IAAP,EAAa,GAAb,C;QDyHS,KCxHT,gBAAO,IAAP,EAAa,GAAb,C;QDwHS,KCvHT,gBAAO,GAAP,EAAY,GAAZ,C;QDuHS,KCtHT,gBAAO,GAAP,EAAY,GAAZ,C;QDsHS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IC2BR,wBDyIO,W;ICvHmD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDjDlB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCjHb,aAAY,I;QDiHC,KChHb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTsPwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSrPnH,WAAM,e;QD8GG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC7GT,gBAAO,IAAP,EAAa,GAAb,C;QD6GS,KC5GT,gBAAO,IAAP,EAAa,GAAb,C;QD4GS,KC3GT,gBAAO,IAAP,EAAa,GAAb,C;QD2GS,KC1GT,gBAAO,IAAP,EAAa,GAAb,C;QD0GS,KCzGT,gBAAO,IAAP,EAAa,GAAb,C;QDyGS,KCxGT,gBAAO,IAAP,EAAa,GAAb,C;QDwGS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IC6CR,uBDuHO,W;ICzGkD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID/DjB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCnGb,aAAY,I;QDmGC,KClGb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTwOwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSvOnH,WAAM,e;QDgGG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC/FT,gBAAO,IAAP,EAAa,GAAb,C;QD+FS,KC9FT,gBAAO,IAAP,EAAa,GAAb,C;QD8FS,KC7FT,gBAAO,IAAP,EAAa,GAAb,C;QD6FS,KC5FT,gBAAO,IAAP,EAAa,GAAb,C;QD4FS,KC3FT,gBAAO,IAAP,EAAa,GAAb,C;QD2FS,KC1FT,gBAAO,IAAP,EAAa,GAAb,C;QD0FS,KCzFT,gBAAO,GAAP,EAAY,GAAZ,C;QDyFS,KCxFT,gBAAO,GAAP,EAAY,GAAZ,C;QDwFS,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IC2DR,sBDyGO,W;ICzFmD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID/ElB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCnFb,aAAY,I;QDmFC,KClFb,wB;QACA,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QTwNwB,cQvIX,KRuIoC,U;QAAW,YQvI/C,KRuIuE,Q;QAAS,aQvIhF,KRuI0G,S;QSvNnH,WAAM,e;QDgFG,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KC/ET,gBAAO,IAAP,EAAa,GAAb,C;QD+ES,KC9ET,gBAAO,IAAP,EAAa,GAAb,C;QD8ES,KC7ET,gBAAO,IAAP,EAAa,GAAb,C;QD6ES,KC5ET,gBAAO,IAAP,EAAa,GAAb,C;QD4ES,KC3ET,gBAAO,IAAP,EAAa,GAAb,C;QD2ES,KC1ET,gBAAO,IAAP,EAAa,GAAb,C;QD0ES,KCzET,gBAAO,IAAP,EAAa,GAAb,C;QDyES,KCxET,gBAAO,IAAP,EAAa,GAAb,C;QDwES,KCvET,gBAAO,IAAP,EAAa,GAAb,C;QDuES,KCtET,gBAAO,IAAP,EAAa,GAAb,C;QDsES,KRyIb,aAAiB,W;QQzIJ,KR0Ib,WAAe,S;QQ1IF,KR2Ib,YAAgB,U;QQ3IH,KR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IC2ER,uBDyFO,W;ICvEkD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDjGjB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCjEb,aAAY,I;QDiEC,KChEb,wB;QACA,WAAM,e;QD+DO,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KR+EnB,Y;QACA,UQhFmB,KRgFnB,EAAY,eS9IQ,GT8IR,CAAZ,EAA0B,eS9ID,GT8IC,CAA1B,EAA4C,eS9Id,GT8Ic,CAA5C,EAA+D,eS9I5B,GT8I4B,CAA/D,EAA8E,eS9ItC,IT8IsC,CAA9E,EAA6F,eS9IrD,IT8IqD,CAA7F,C;QQhFmB,KRiFnB,O;QQjFmB,KC7DT,cAAK,eAAW,YAAO,IAAlB,CAAL,C;;QD+DA,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;IC6FR,sBDuEO,W;IC9DmD,kBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID1GlB,kB;;MAiKA,YAAU,iCAFyC,IAEzC,C;;QAEG,KCxDb,aAAY,I;QDwDC,KCvDb,wB;QACA,WAAM,e;QDsDO,KRG4B,eAAS,eAAH,IAAG,CAAT,EAAwB,eAA9B,IAA8B,CAAxB,C;QQH5B,KR+EnB,Y;QACA,UQhFmB,KRgFnB,EAAY,eSrIQ,GTqIR,CAAZ,EAA0B,eSrID,GTqIC,CAA1B,EAA4C,eSrId,GTqIc,CAA5C,EAA+D,eSrI5B,GTqI4B,CAA/D,EAA8E,eSrItC,ITqIsC,CAA9E,EAA6F,eSrIrD,ITqIqD,CAA7F,C;QQhFmB,KRiFnB,O;QQjFmB,KCpDT,cAAK,eAAW,YAAO,KAAlB,CAAL,C;;QDsDA,KAAI,U;;;MAjKJ,2BAL2B,IAK3B,C;;ICsGR,uBD8DO,W;ICtDoD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDlHnB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MChDb,aAAY,I;QDgDC,MC/Cb,wB;QACA,YAAM,e;QD8CO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eS7HQ,GT6HR,CAAZ,EAA0B,eS7HD,GT6HC,CAA1B,EAA4C,eS7Hd,GT6Hc,CAA5C,EAA+D,eS7H5B,GT6H4B,CAA/D,EAA8E,eS7HtC,IT6HsC,CAA9E,EAA6F,eS7HrD,IT6HqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MC5CT,cAAK,eAAW,YAAO,MAAlB,CAAL,C;;QD8CA,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC8GR,wBDsDO,Y;IC9CqD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID1HpB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCxCb,aAAY,I;QDwCC,MCvCb,wB;QACA,YAAM,e;QDsCO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eSrHQ,GTqHR,CAAZ,EAA0B,eSrHD,GTqHC,CAA1B,EAA4C,eSrHd,GTqHc,CAA5C,EAA+D,eSrH5B,GTqH4B,CAA/D,EAA8E,eSrHtC,ITqHsC,CAA9E,EAA6F,eSrHrD,ITqHqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MCpCT,cAAK,eAAW,YAAO,OAAlB,CAAL,C;;QDsCA,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICsHR,yBD8CO,Y;ICtCoD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDlInB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MChCb,aAAY,I;QDgCC,MC/Bb,wB;QACA,YAAM,e;QD8BO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eS7GQ,GT6GR,CAAZ,EAA0B,eS7GD,GT6GC,CAA1B,EAA4C,eS7Gd,GT6Gc,CAA5C,EAA+D,eS7G5B,GT6G4B,CAA/D,EAA8E,eS7GtC,IT6GsC,CAA9E,EAA6F,eS7GrD,IT6GqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MC5BT,cAAK,eAAW,YAAO,MAAlB,CAAL,C;;QD8BA,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC8HR,wBDsCO,Y;IC9BoD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID1InB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCxBb,aAAY,I;QDwBC,MCvBb,wB;QACA,YAAM,e;QDsBO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eSrGQ,GTqGR,CAAZ,EAA0B,eSrGD,GTqGC,CAA1B,EAA4C,eSrGd,GTqGc,CAA5C,EAA+D,eSrG5B,GTqG4B,CAA/D,EAA8E,eSrGtC,ITqGsC,CAA9E,EAA6F,eSrGrD,ITqGqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MCpBT,cAAK,eAAW,YAAO,MAAlB,CAAL,C;;QDsBA,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICsIR,wBD8BO,Y;ICrBoD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDnJnB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCfb,aAAY,I;QDeC,MCdb,wB;QACA,YAAM,e;QDaO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eS5FQ,GT4FR,CAAZ,EAA0B,eS5FA,GT4FA,CAA1B,EAA4C,eS5Fb,GT4Fa,CAA5C,EAA+D,eS5F3B,GT4F2B,CAA/D,EAA8E,eS5FrC,IT4FqC,CAA9E,EAA6F,eS5FpD,IT4FoD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MCXT,cAAK,eAAW,YAAO,IAAlB,CAAL,C;QDWS,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eSzFQ,GTyFR,CAAZ,EAA0B,eSzFD,GTyFC,CAA1B,EAA4C,eSzFd,GTyFc,CAA5C,EAA+D,eSzF5B,GTyF4B,CAA/D,EAA8E,eSzFtC,ITyFsC,CAA9E,EAA6F,eSzFrD,ITyFqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MCRT,cAAK,eAAW,YAAO,KAAlB,CAAL,C;QDQS,MR+EnB,Y;QACA,UQhFmB,MRgFnB,EAAY,eStFQ,GTsFR,CAAZ,EAA0B,eStFD,GTsFC,CAA1B,EAA4C,eStFd,GTsFc,CAA5C,EAA+D,eStF5B,GTsF4B,CAA/D,EAA8E,eStFtC,ITsFsC,CAA9E,EAA6F,eStFrD,ITsFqD,CAA7F,C;QQhFmB,MRiFnB,O;QQjFmB,MCLT,cAAK,eAAW,YAAO,MAAlB,CAAL,C;;QDOA,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC+IR,wBDqBO,Y;ICLP,sBAAqB,iBAAiB,8FAAjB,EAAsF,gBAAtF,C;IACrB,oBAAmB,iBAAiB,4FAAjB,EAAoF,gBAApF,C;IACnB,oBAAmB,iBAAiB,4FAAjB,EAAoF,gBAApF,C;IACnB,sBAAqB,iBAAiB,8FAAjB,EAAsF,gBAAtF,C;IACrB,qBAAoB,iBAAiB,6FAAjB,EAAqF,gBAArF,C;IAGuC,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID1KnB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCQb,aAAY,I;QDRC,MCSb,wB;QACA,YAAM,e;QDVO,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QSQzC,cAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QT4HwB,cQvIX,MRuIoC,U;QAAW,YQvI/C,MRuIuE,Q;QAAS,aQvIhF,MRuI0G,S;QQvI1G,MCYT,gBAAO,GAAP,EAAY,GAAZ,C;QDZS,MCaT,gBAAO,GAAP,EAAY,GAAZ,C;QDbS,MCcT,gBAAO,GAAP,EAAY,GAAZ,C;QDdS,MCeT,Q;QACA,KDhBS,MCgBT,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,C;QACA,ODjBS,MCiBT,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,C;QDjBS,MRyIb,aAAiB,W;QQzIJ,MR0Ib,WAAe,S;QQ1IF,MR2Ib,YAAgB,U;QQ3IH,MR4InB,gBAAO,eAAW,OAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICsKR,wBDFO,Y;ICkBmD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;ID1LlB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCwBb,aAAY,I;QDxBC,MCyBb,wB;QACA,eAAO,YAAO,M;QAAd,e;QAAA,a;QAAA,c;QT6GwB,cQvIX,MRuIoC,U;QAAW,YQvI/C,MRuIuE,Q;QAAS,aQvIhF,MRuI0G,S;QS5GnH,YAAM,e;QD3BG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MC4BT,gBAAO,GAAP,EAAY,GAAZ,C;QD5BS,MC6BT,gBAAO,GAAP,EAAY,GAAZ,C;QD7BS,MRyIb,aAAiB,W;QQzIJ,MR0Ib,WAAe,S;QQ1IF,MR2Ib,YAAgB,U;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICsLR,uBDlBO,Y;IC6BmD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDrMlB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCmCb,aAAY,I;QDnCC,MCoCb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTkGwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSjGnH,YAAM,e;QDtCG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCuCT,gBAAO,GAAP,EAAY,GAAZ,C;QDvCS,MCwCT,gBAAO,GAAP,EAAY,GAAZ,C;QDxCS,MCyCT,gBAAO,GAAP,EAAY,GAAZ,C;QDzCS,MC0CT,gBAAO,GAAP,EAAY,GAAZ,C;QD1CS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICiMR,uBD7BO,Y;IC0CqD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDlNpB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCgDb,aAAY,I;QDhDC,MCiDb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTqFwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSpFnH,YAAM,e;QDnDG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCoDT,gBAAO,GAAP,EAAY,GAAZ,C;QDpDS,MCqDT,gBAAO,GAAP,EAAY,GAAZ,C;QDrDS,MCsDT,gBAAO,GAAP,EAAY,GAAZ,C;QDtDS,MCuDT,gBAAO,GAAP,EAAY,GAAZ,C;QDvDS,MCwDT,gBAAO,GAAP,EAAY,GAAZ,C;QDxDS,MCyDT,gBAAO,GAAP,EAAY,GAAZ,C;QDzDS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC8MR,yBD1CO,Y;ICyDoD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDjOnB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MC+Db,aAAY,I;QD/DC,MCgEb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTsEwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSrEnH,YAAM,e;QDlEG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCmET,gBAAO,GAAP,EAAY,GAAZ,C;QDnES,MCoET,gBAAO,GAAP,EAAY,GAAZ,C;QDpES,MCqET,gBAAO,GAAP,EAAY,GAAZ,C;QDrES,MCsET,gBAAO,GAAP,EAAY,GAAZ,C;QDtES,MCuET,gBAAO,GAAP,EAAY,GAAZ,C;QDvES,MCwET,gBAAO,GAAP,EAAY,GAAZ,C;QDxES,MCyET,gBAAO,GAAP,EAAY,GAAZ,C;QDzES,MC0ET,gBAAO,GAAP,EAAY,GAAZ,C;QD1ES,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC6NR,wBDzDO,Y;IC2EqD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDnPpB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCiFb,aAAY,I;QDjFC,MCkFb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QToDwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSnDnH,YAAM,e;QDpFG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCqFT,gBAAO,GAAP,EAAY,GAAZ,C;QDrFS,MCsFT,gBAAO,GAAP,EAAY,GAAZ,C;QDtFS,MCuFT,gBAAO,GAAP,EAAY,GAAZ,C;QDvFS,MCwFT,gBAAO,GAAP,EAAY,GAAZ,C;QDxFS,MCyFT,gBAAO,GAAP,EAAY,GAAZ,C;QDzFS,MC0FT,Q;QD1FS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC+OR,yBD3EO,Y;ICyFmD,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDjQlB,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MC+Fb,aAAY,I;QD/FC,MCgGb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTsCwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSrCnH,YAAM,e;QDlGG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCmGT,gBAAO,GAAP,EAAY,IAAZ,C;QDnGS,MCoGT,gBAAO,GAAP,EAAY,IAAZ,C;QDpGS,MCqGT,gBAAO,GAAP,EAAY,GAAZ,C;QDrGS,MCsGT,gBAAO,GAAP,EAAY,IAAZ,C;QDtGS,MCuGT,gBAAO,GAAP,EAAY,GAAZ,C;QDvGS,MCwGT,gBAAO,GAAP,EAAY,IAAZ,C;QDxGS,MCyGT,gBAAO,GAAP,EAAY,IAAZ,C;QDzGS,MC0GT,gBAAO,GAAP,EAAY,GAAZ,C;QD1GS,MC2GT,gBAAO,GAAP,EAAY,IAAZ,C;QD3GS,MC4GT,gBAAO,GAAP,EAAY,GAAZ,C;QD5GS,MC6GT,gBAAO,GAAP,EAAY,IAAZ,C;QD7GS,MC8GT,gBAAO,GAAP,EAAY,IAAZ,C;QD9GS,MC+GT,gBAAO,GAAP,EAAY,GAAZ,C;QD/GS,MCgHT,gBAAO,GAAP,EAAY,GAAZ,C;QDhHS,MCiHT,Q;QDjHS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;IC6PR,uBDzFO,Y;ICgH6C,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDxRZ,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCsHb,aAAY,I;QDtHC,MCuHb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTewB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSdnH,YAAM,e;QDzHG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MC0HT,gBAAO,GAAP,EAAY,IAAZ,C;QD1HS,MC2HT,gBAAO,GAAP,EAAY,IAAZ,C;QD3HS,MC4HT,gBAAO,GAAP,EAAY,IAAZ,C;QD5HS,MC6HT,gBAAO,GAAP,EAAY,IAAZ,C;QD7HS,MC8HT,gBAAO,GAAP,EAAY,IAAZ,C;QD9HS,MC+HT,gBAAO,GAAP,EAAY,IAAZ,C;QD/HS,MCgIT,Q;QDhIS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICoRR,iBDhHO,Y;IC+H8C,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDvSb,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCqIb,aAAY,I;QDrIC,MCsIb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTAwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSCnH,YAAM,e;QDxIG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MCyIT,gBAAO,GAAP,EAAY,IAAZ,C;QDzIS,MC0IT,gBAAO,GAAP,EAAY,IAAZ,C;QD1IS,MC2IT,gBAAO,GAAP,EAAY,IAAZ,C;QD3IS,MC4IT,gBAAO,GAAP,EAAY,IAAZ,C;QD5IS,MC6IT,gBAAO,GAAP,EAAY,IAAZ,C;QD7IS,MC8IT,gBAAO,GAAP,EAAY,IAAZ,C;QD9IS,MC+IT,gBAAO,GAAP,EAAY,GAAZ,C;QD/IS,MCgJT,gBAAO,GAAP,EAAY,GAAZ,C;QDhJS,MCiJT,Q;QDjJS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICmSR,kBD/HO,Y;ICgJ6C,mBAApC,YAAY,eAAZ,EAAwB,eAAxB,C;IDxTZ,mB;;MAiKA,aAAU,kCAFyC,IAEzC,C;;QAEG,MCsJb,aAAY,I;QDtJC,MCuJb,wB;QACA,eAAO,YAAO,M;QAAd,gB;QAAA,c;QAAA,e;QTjBwB,eQvIX,MRuIoC,U;QAAW,aQvI/C,MRuIuE,Q;QAAS,cQvIhF,MRuI0G,S;QSkBnH,YAAM,e;QDzJG,MRG4B,eAAS,eAAH,KAAG,CAAT,EAAwB,eAA9B,KAA8B,CAAxB,C;QQH5B,MC0JT,gBAAO,GAAP,EAAY,IAAZ,C;QD1JS,MC2JT,gBAAO,GAAP,EAAY,IAAZ,C;QD3JS,MC4JT,gBAAO,GAAP,EAAY,IAAZ,C;QD5JS,MC6JT,gBAAO,GAAP,EAAY,IAAZ,C;QD7JS,MC8JT,gBAAO,GAAP,EAAY,IAAZ,C;QD9JS,MC+JT,gBAAO,GAAP,EAAY,IAAZ,C;QD/JS,MCgKT,gBAAO,GAAP,EAAY,IAAZ,C;QDhKS,MCiKT,gBAAO,GAAP,EAAY,IAAZ,C;QDjKS,MCkKT,gBAAO,GAAP,EAAY,IAAZ,C;QDlKS,MCmKT,gBAAO,GAAP,EAAY,IAAZ,C;QDnKS,MCoKT,Q;QDpKS,MRyIb,aAAiB,Y;QQzIJ,MR0Ib,WAAe,U;QQ1IF,MR2Ib,YAAgB,W;QQ3IH,MR4InB,gBAAO,eAAW,QAAX,CAAP,C;;QQ1IU,MAAI,U;;;MAjKJ,4BAL2B,IAK3B,C;;ICoTR,iBDhJO,Y;G;;;;;;EE3MX,8C;IAEI,oBAAoB,mB;IAC+B,gBAAT,OAAT,mBAAS,C;IJyrBnC,kBAAS,gB;IA6EA,Q;IAAA,2B;IAAhB,OAAgB,cAAhB,C;MAAgB,yB;MAAM,IItwBoC,EJswBtB,OItwBwB,0CJswBxB,OItwBqD,mCAA/B,CJswBpC,C;QAAwB,WAAY,WAAI,OAAJ,C;;IItwB1D,sBAA6H,MAAX,SJuwB3G,WIvwB2G,CAAW,C;IAC7H,qBAA4D,MAAX,SAAT,OAAT,kBAAS,CAAS,CAAW,C;IACX,kBAAT,OAAT,kBAAS,C;IJurBjC,oBAAS,gB;IA6EA,U;IAAA,+B;IAAhB,OAAgB,gBAAhB,C;MAAgB,6B;MAAM,IAAc,SIpwBsB,uCJowBpC,C;QAAwB,aAAY,WAAI,SAAJ,C;;IIpwB1D,qBAAkG,MAAX,SJqwBhF,aIrwBgF,CAAW,C;IAClG,sBAA8D,MAAX,SAAT,OAAT,mBAAS,CAAS,CAAW,C;IAoB9D,OAAO,a;EAEX,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;StBDwB,oBAAU,kB;UAEP,I;WACC,I;YAGC,K;YACA,G;aAGA,M;cACE,K;aAGF,K;cACC,K;UAEJ,K;UACA,K;mBAGS,I;mBAEA,G;aAGN,K;cACC,I;cAEA,G;cACA,G;WACH,C;YAEC,K;YACA,M;gBAEK,E;cACH,E;sBAEQ,I;eAGP,C;aAEF,C;cACC,C;cACA,C;cACA,C;gBAEE,C;uBACC,yBAAO,WAAP,C;cAKJ,+BAAoC,gBAApC,C;gBDG2B,gB;mBCA3B,C;iBACF,C;aAEJ,C;;;;;;"}